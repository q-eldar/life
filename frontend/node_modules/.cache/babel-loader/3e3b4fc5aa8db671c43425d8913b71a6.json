{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/me/js/dj/life/frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport produce from 'immer';\nconst COLS = 50;\nconst ROWS = 50;\n\nfunction to_2d_grid(preset) {\n  const rows = [];\n  let offset = 0;\n\n  for (let i = 0; i < ROWS; i++) {\n    rows.push(preset.slice(offset, offset + COLS));\n    offset += COLS;\n  }\n\n  return rows;\n}\n\nfunction App() {\n  _s();\n\n  const [grid, setGrid] = useState([]);\n  useEffect(() => {\n    axios.get('http://127.0.0.1:8000/api/worlds/3/').then(({\n      data\n    }) => {\n      setGrid(to_2d_grid(Array.from(data.preset.slice(1, -1).split(',')).map(s => parseInt(s.trim()))));\n    });\n  }, []);\n\n  function clickme() {\n    const payload = {\n      preset: JSON.stringify(grid.flat())\n    };\n    console.log(payload);\n    axios.put('http://127.0.0.1:8000/api/worlds/3/', {\n      preset: ''\n    }).then(res => {\n      console.log(res.data);\n    });\n  }\n\n  ; // console.log(grid);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clickme,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 3\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'grid',\n        gridTemplateColumns: `repeat(${COLS}, 20px)`\n      },\n      children: grid.map((rows, i) => rows.map((col, k) => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => {\n          const newGrid = produce(grid, gridCopy => {\n            gridCopy[i][k] = grid[i][k] ? 0 : 1;\n          });\n          setGrid(newGrid);\n        },\n        style: {\n          width: 20,\n          height: 20,\n          backgroundColor: grid[i][k] == 1 ? \"green\" : \"white\",\n          border: 'solid 1px black'\n        }\n      }, `${i}-${k}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 4\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 2\n  }, this);\n}\n\n_s(App, \"w1YSakViRD9z3AUkL5Qso5coyFg=\");\n\n_c = App;\nexport default App; // class App extends Component {\n//     constructor(props){\n// \tsuper(props);\n// \tthis.state = {\n// \t    preset: [],\n// \t    size: [50, 50],\n// \t    interval: 100\n// \t};\n//     }\n//     componentDidMount(){\n// \tthis.getPreset();\n//     }\n//     getPreset() {\n// \taxios\n// \t    .get('http://127.0.0.1:8000/api/worlds/1/')\n// \t    .then(res => {\n// \t\tthis.setState(() => ({\n// \t\t    preset: to_2d_grid(Array.from(res.data.preset.slice(1,-1).split(',')))\n// \t\t}));\n// \t    }).catch(err => {\n// \t\tconsole.log(err);\n// \t    });\n//     }\n//     renderWorld() {\n// \tconsole.log(this.state.preset)\n//     }\n//     render() {\n// \treturn (\n// \t    <div style={{\n// \t\t     display: 'grid',\n// \t\t     gridTemplateColumns: `repeat(${COLS}, 20px)`\n// \t\t }}>\n// \t\t{this.state.preset.map((rows, i) =>\n// \t\t    rows.map((col, k) => <div\n// \t\t\t\t\t     key={`${i}-${k}`}\n// \t\t\t\t\t     onClick={() => {\n// \t\t\t\t\t     }}\n// \t\t\t\t\t     style={{\n// \t\t\t\t\t\t width: 20,\n// \t\t\t\t\t\t height: 20,\n// \t\t\t\t\t\t backgroundColor: (this.state.preset[i][k] == \" 1\") ? 'green' : undefined,\n// \t\t\t\t\t\t border: 'solid 1px black'\n// \t\t\t\t\t     }}\n// \t\t\t\t\t />))}\n// \t    </div>\n// \t)\n//     }\n// }\n// import './App.css';\n// import React, { Component, useState, useEffect } from 'react'\n// import axios from 'axios'\n// const ROWS = 50;\n// const COLS = 50;\n// function App() {\n//     const [preset, setPreset] = useState([]);\n//     const [grid, setGrid] = useState(() => {\n// \tconst rows = [];\n// \tlet offset = 0;\n// \tfor(let i =0; i < ROWS; i++){\n// \t    rows.push(preset.slice(offset, offset + COLS))\n// \t    offset += COLS;\n// \t}\n// \treturn rows;\n//     });\n//     useEffect(async () => {\n// \tconst result = await axios(\n// \t    'http://127.0.0.1:8000/api/worlds/1/'\n// \t);\n// \tsetPreset(result);\n// \t// console.log(result)\n//     });\n//     console.log(grid)\n//     return <div>hello</div>\n// }\n// export default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/me/js/dj/life/frontend/src/App.js"],"names":["React","useState","useEffect","axios","produce","COLS","ROWS","to_2d_grid","preset","rows","offset","i","push","slice","App","grid","setGrid","get","then","data","Array","from","split","map","s","parseInt","trim","clickme","payload","JSON","stringify","flat","console","log","put","res","display","gridTemplateColumns","col","k","newGrid","gridCopy","width","height","backgroundColor","border"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport produce from 'immer'\n\n\nconst COLS = 50;\nconst ROWS = 50;\n\nfunction to_2d_grid(preset){\n    const rows = [];\n    let offset = 0;\n    for(let i =0; i < ROWS; i++){\n\trows.push(preset.slice(offset, offset + COLS))\n\toffset += COLS;\n    }\n\n    return rows;\n}\n\nfunction App() {\n    const [grid, setGrid] = useState([]);\n    useEffect(() => {\n\taxios\n\t    .get('http://127.0.0.1:8000/api/worlds/3/')\n\t    .then(({data}) => {\n\t\tsetGrid(to_2d_grid(Array.from(data.preset.slice(1,-1).split(',')).map((s) => parseInt(s.trim()))))\n\t    })\n    }, []);\n\n    function clickme() {\n\tconst payload = {\n\t    preset: JSON.stringify(grid.flat())\n\t}\n\tconsole.log(payload)\n\taxios\n\t    .put('http://127.0.0.1:8000/api/worlds/3/', {preset: ''})\n\t    .then(res => {\n\t\tconsole.log(res.data);\n\t    })\n    };\n    \n    // console.log(grid);\n    return (\n\t<div>\n\t    <div>\n\t\t<button onClick={clickme}>Save</button>\n\t    </div>\n\t    <div\n\t\tstyle={{\n\t\t    display: 'grid',\n\t\t    gridTemplateColumns: `repeat(${COLS}, 20px)`\n\t\t}}\n\t    >\n\t\t{grid.map((rows, i) =>\n\t\t    rows.map((col, k) =>\n\t\t\t<div\n\t\t\t    key={ `${i}-${k}` }\n\t\t\t    onClick={() => {\n\t\t\t\tconst newGrid = produce(grid, gridCopy => {\n\t\t\t\t    gridCopy[i][k] = grid[i][k] ? 0 : 1;\n\t\t\t\t});\n\t\t\t\tsetGrid(newGrid);\n\t\t\t    }}\n\t\t\t    style={{\n\t\t\t\twidth: 20,\n\t\t\t\theight: 20,\n\t\t\t\tbackgroundColor: grid[i][k] == 1 ? \"green\" : \"white\",\n\t\t\t\tborder: 'solid 1px black'\n\t\t\t    }}\n\t\t\t/>\n\t\t    ))}\n\t    </div>\n\t</div>\n    )\n}\nexport default App;\n// class App extends Component {\n//     constructor(props){\n// \tsuper(props);\n// \tthis.state = {\n// \t    preset: [],\n// \t    size: [50, 50],\n// \t    interval: 100\n// \t};\n//     }\n    \n//     componentDidMount(){\n// \tthis.getPreset();\n//     }\n\n//     getPreset() {\n// \taxios\n// \t    .get('http://127.0.0.1:8000/api/worlds/1/')\n// \t    .then(res => {\n// \t\tthis.setState(() => ({\n// \t\t    preset: to_2d_grid(Array.from(res.data.preset.slice(1,-1).split(',')))\n// \t\t}));\n// \t    }).catch(err => {\n// \t\tconsole.log(err);\n// \t    });\n//     }\n\n//     renderWorld() {\n// \tconsole.log(this.state.preset)\n//     }\n    \n//     render() {\n// \treturn (\n// \t    <div style={{\n// \t\t     display: 'grid',\n// \t\t     gridTemplateColumns: `repeat(${COLS}, 20px)`\n// \t\t }}>\n// \t\t{this.state.preset.map((rows, i) =>\n// \t\t    rows.map((col, k) => <div\n// \t\t\t\t\t     key={`${i}-${k}`}\n// \t\t\t\t\t     onClick={() => {\n\n// \t\t\t\t\t     }}\n// \t\t\t\t\t     style={{\n// \t\t\t\t\t\t width: 20,\n// \t\t\t\t\t\t height: 20,\n// \t\t\t\t\t\t backgroundColor: (this.state.preset[i][k] == \" 1\") ? 'green' : undefined,\n// \t\t\t\t\t\t border: 'solid 1px black'\n// \t\t\t\t\t     }}\n// \t\t\t\t\t />))}\n// \t    </div>\n// \t)\n//     }\n// }\n\n\n\n// import './App.css';\n// import React, { Component, useState, useEffect } from 'react'\n// import axios from 'axios'\n\n// const ROWS = 50;\n// const COLS = 50;\n// function App() {\n//     const [preset, setPreset] = useState([]);\n//     const [grid, setGrid] = useState(() => {\n// \tconst rows = [];\n// \tlet offset = 0;\n// \tfor(let i =0; i < ROWS; i++){\n// \t    rows.push(preset.slice(offset, offset + COLS))\n// \t    offset += COLS;\n// \t}\n\n// \treturn rows;\n//     });\n\n    \n//     useEffect(async () => {\n// \tconst result = await axios(\n// \t    'http://127.0.0.1:8000/api/worlds/1/'\n// \t);\n// \tsetPreset(result);\n// \t// console.log(result)\n//     });\n//     console.log(grid)\n//     return <div>hello</div>\n// }\n\n// export default App;\n"]},"metadata":{},"sourceType":"module"}