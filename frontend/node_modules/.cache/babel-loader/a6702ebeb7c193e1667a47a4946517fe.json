{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/me/js/dj/life/frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport produce from 'immer';\nconst COLS = 50;\nconst ROWS = 50;\n\nfunction to_2d_grid(preset) {\n  const rows = [];\n  let offset = 0;\n\n  for (let i = 0; i < ROWS; i++) {\n    rows.push(preset.slice(offset, offset + COLS));\n    offset += COLS;\n  }\n\n  return rows;\n}\n\nfunction App() {\n  _s();\n\n  const [grid, setGrid] = useState([]);\n  useEffect(() => {\n    getData = () => {\n      axios.get('http://127.0.0.1:8000/api/worlds/1/').then(({\n        data\n      }) => {\n        setGrid(to_2d_grid(Array.from(data.preset.slice(1, -1).split(','))));\n      });\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'grid',\n      gridTemplateColumns: `repeat(${COLS}, 20px)`\n    },\n    children: grid.map((rows, i) => rows.map((col, k) => /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => {\n        const newGrid = produce(grid, gridCopy => {\n          gridCopy[i][k] = 1;\n        });\n        setGrid(newGrid);\n      },\n      style: {\n        width: 20,\n        height: 20,\n        backgroundColor: grid[i][k] == \" 1\" ? \"green\" : \"white\",\n        border: 'solid 1px black'\n      }\n    }, `${i}-${k}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 2\n  }, this);\n}\n\n_s(App, \"w1YSakViRD9z3AUkL5Qso5coyFg=\");\n\n_c = App;\nexport default App; // class App extends Component {\n//     constructor(props){\n// \tsuper(props);\n// \tthis.state = {\n// \t    preset: [],\n// \t    size: [50, 50],\n// \t    interval: 100\n// \t};\n//     }\n//     componentDidMount(){\n// \tthis.getPreset();\n//     }\n//     getPreset() {\n// \taxios\n// \t    .get('http://127.0.0.1:8000/api/worlds/1/')\n// \t    .then(res => {\n// \t\tthis.setState(() => ({\n// \t\t    preset: to_2d_grid(Array.from(res.data.preset.slice(1,-1).split(',')))\n// \t\t}));\n// \t    }).catch(err => {\n// \t\tconsole.log(err);\n// \t    });\n//     }\n//     renderWorld() {\n// \tconsole.log(this.state.preset)\n//     }\n//     render() {\n// \treturn (\n// \t    <div style={{\n// \t\t     display: 'grid',\n// \t\t     gridTemplateColumns: `repeat(${COLS}, 20px)`\n// \t\t }}>\n// \t\t{this.state.preset.map((rows, i) =>\n// \t\t    rows.map((col, k) => <div\n// \t\t\t\t\t     key={`${i}-${k}`}\n// \t\t\t\t\t     onClick={() => {\n// \t\t\t\t\t     }}\n// \t\t\t\t\t     style={{\n// \t\t\t\t\t\t width: 20,\n// \t\t\t\t\t\t height: 20,\n// \t\t\t\t\t\t backgroundColor: (this.state.preset[i][k] == \" 1\") ? 'green' : undefined,\n// \t\t\t\t\t\t border: 'solid 1px black'\n// \t\t\t\t\t     }}\n// \t\t\t\t\t />))}\n// \t    </div>\n// \t)\n//     }\n// }\n// import './App.css';\n// import React, { Component, useState, useEffect } from 'react'\n// import axios from 'axios'\n// const ROWS = 50;\n// const COLS = 50;\n// function App() {\n//     const [preset, setPreset] = useState([]);\n//     const [grid, setGrid] = useState(() => {\n// \tconst rows = [];\n// \tlet offset = 0;\n// \tfor(let i =0; i < ROWS; i++){\n// \t    rows.push(preset.slice(offset, offset + COLS))\n// \t    offset += COLS;\n// \t}\n// \treturn rows;\n//     });\n//     useEffect(async () => {\n// \tconst result = await axios(\n// \t    'http://127.0.0.1:8000/api/worlds/1/'\n// \t);\n// \tsetPreset(result);\n// \t// console.log(result)\n//     });\n//     console.log(grid)\n//     return <div>hello</div>\n// }\n// export default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/me/js/dj/life/frontend/src/App.js"],"names":["React","useState","useEffect","axios","produce","COLS","ROWS","to_2d_grid","preset","rows","offset","i","push","slice","App","grid","setGrid","getData","get","then","data","Array","from","split","display","gridTemplateColumns","map","col","k","newGrid","gridCopy","width","height","backgroundColor","border"],"mappings":"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","sourcesContent":["import './App.css';\nimport React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport produce from 'immer'\n\n\nconst COLS = 50;\nconst ROWS = 50;\n\nfunction to_2d_grid(preset){\n    const rows = [];\n    let offset = 0;\n    for(let i =0; i < ROWS; i++){\n\trows.push(preset.slice(offset, offset + COLS))\n\toffset += COLS;\n    }\n\n    return rows;\n}\n\nfunction App() {\n    const [grid, setGrid] = useState([]);\n    useEffect(() =>{\n\tgetData = () => {\n\t    axios\n\t\t.get('http://127.0.0.1:8000/api/worlds/1/')\n\t\t.then(({data}) => {\n\t\t    setGrid(to_2d_grid(Array.from(data.preset.slice(1,-1).split(','))))\n\t\t})\n\t}\n\t\n    }, [])\n    \n    return (\n\t<div\n\t    style={{\n\t\tdisplay: 'grid',\n\t\tgridTemplateColumns: `repeat(${COLS}, 20px)`\n\t    }}\n\t>\n\t    {grid.map((rows, i) =>\n\t\trows.map((col, k) =>\n\t\t    <div\n\t\t\tkey={ `${i}-${k}` }\n\t\t\tonClick={() => {\n\t\t\t    const newGrid = produce(grid, gridCopy => {\n\t\t\t\tgridCopy[i][k] = 1;\n\t\t\t    });\n\t\t\t    setGrid(newGrid);\n\t\t\t}}\n\t\t\tstyle={{\n\t\t\t    width: 20,\n\t\t\t    height: 20,\n\t\t\t    backgroundColor: grid[i][k] == \" 1\" ? \"green\" : \"white\",\n\t\t\t    border: 'solid 1px black'\n\t\t\t}}\n\t\t    />\n\t\t))}\n\t</div>\n    )\n}\nexport default App;\n// class App extends Component {\n//     constructor(props){\n// \tsuper(props);\n// \tthis.state = {\n// \t    preset: [],\n// \t    size: [50, 50],\n// \t    interval: 100\n// \t};\n//     }\n    \n//     componentDidMount(){\n// \tthis.getPreset();\n//     }\n\n//     getPreset() {\n// \taxios\n// \t    .get('http://127.0.0.1:8000/api/worlds/1/')\n// \t    .then(res => {\n// \t\tthis.setState(() => ({\n// \t\t    preset: to_2d_grid(Array.from(res.data.preset.slice(1,-1).split(',')))\n// \t\t}));\n// \t    }).catch(err => {\n// \t\tconsole.log(err);\n// \t    });\n//     }\n\n//     renderWorld() {\n// \tconsole.log(this.state.preset)\n//     }\n    \n//     render() {\n// \treturn (\n// \t    <div style={{\n// \t\t     display: 'grid',\n// \t\t     gridTemplateColumns: `repeat(${COLS}, 20px)`\n// \t\t }}>\n// \t\t{this.state.preset.map((rows, i) =>\n// \t\t    rows.map((col, k) => <div\n// \t\t\t\t\t     key={`${i}-${k}`}\n// \t\t\t\t\t     onClick={() => {\n\n// \t\t\t\t\t     }}\n// \t\t\t\t\t     style={{\n// \t\t\t\t\t\t width: 20,\n// \t\t\t\t\t\t height: 20,\n// \t\t\t\t\t\t backgroundColor: (this.state.preset[i][k] == \" 1\") ? 'green' : undefined,\n// \t\t\t\t\t\t border: 'solid 1px black'\n// \t\t\t\t\t     }}\n// \t\t\t\t\t />))}\n// \t    </div>\n// \t)\n//     }\n// }\n\n\n\n// import './App.css';\n// import React, { Component, useState, useEffect } from 'react'\n// import axios from 'axios'\n\n// const ROWS = 50;\n// const COLS = 50;\n// function App() {\n//     const [preset, setPreset] = useState([]);\n//     const [grid, setGrid] = useState(() => {\n// \tconst rows = [];\n// \tlet offset = 0;\n// \tfor(let i =0; i < ROWS; i++){\n// \t    rows.push(preset.slice(offset, offset + COLS))\n// \t    offset += COLS;\n// \t}\n\n// \treturn rows;\n//     });\n\n    \n//     useEffect(async () => {\n// \tconst result = await axios(\n// \t    'http://127.0.0.1:8000/api/worlds/1/'\n// \t);\n// \tsetPreset(result);\n// \t// console.log(result)\n//     });\n//     console.log(grid)\n//     return <div>hello</div>\n// }\n\n// export default App;\n"]},"metadata":{},"sourceType":"module"}